const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, PermissionFlagsBits, ChannelType } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('reglement')
        .setDescription('Cr√©e un message de r√®glement avec un bouton de validation')
        .addRoleOption(option =>
            option.setName('role')
                .setDescription('Le r√¥le √† donner apr√®s validation du r√®glement')
                .setRequired(true))
        .addChannelOption(option =>
            option.setName('verification_channel')
                .setDescription('Le salon de v√©rification √† cacher apr√®s validation')
                .addChannelTypes(ChannelType.GuildText)
                .setRequired(true))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(interaction) {
        const role = interaction.options.getRole('role');
        const verificationChannel = interaction.options.getChannel('verification_channel');

        // Configuration initiale du salon de v√©rification
        await verificationChannel.permissionOverwrites.set([
            {
                id: interaction.guild.roles.everyone.id,
                allow: [PermissionFlagsBits.ViewChannel],
            },
            {
                id: role.id,
                deny: [PermissionFlagsBits.ViewChannel],
            }
        ]);

        const embed = new EmbedBuilder()
            .setTitle('üìú R√®glement du Serveur')
            .setColor('#2f3136')
            .setDescription(`
**1. Respect Mutuel**
‚Ä¢ Soyez respectueux envers tous les membres
‚Ä¢ Pas d'insultes, de harc√®lement ou de discrimination
‚Ä¢ √âvitez les d√©bats houleux et les provocations

**2. Contenu Appropri√©**
‚Ä¢ Pas de contenu NSFW ou inappropri√©
‚Ä¢ Pas de spam ou de publicit√© non autoris√©e
‚Ä¢ √âvitez le flood et les messages r√©p√©titifs

**3. Utilisation des Salons**
‚Ä¢ Respectez le th√®me de chaque salon
‚Ä¢ Utilisez les commandes dans les salons appropri√©s
‚Ä¢ Suivez les instructions des mod√©rateurs

**4. S√©curit√©**
‚Ä¢ Ne partagez pas d'informations personnelles
‚Ä¢ Signalez tout comportement suspect aux mod√©rateurs
‚Ä¢ Prot√©gez votre compte et vos informations

**5. Sanctions**
‚Ä¢ Les infractions seront sanctionn√©es selon leur gravit√©
‚Ä¢ Les mod√©rateurs se r√©servent le droit d'appliquer des sanctions
‚Ä¢ Les d√©cisions de la mod√©ration sont finales

En cliquant sur le bouton ci-dessous, vous acceptez de suivre ces r√®gles.`)
            .setFooter({ text: 'Merci de votre compr√©hension et de votre collaboration' });

        const button = new ButtonBuilder()
            .setCustomId('accept-rules')
            .setLabel('J\'accepte le r√®glement')
            .setStyle(ButtonStyle.Success)
            .setEmoji('‚úÖ');

        const row = new ActionRowBuilder()
            .addComponents(button);

        const message = await interaction.reply({
            embeds: [embed],
            components: [row],
            fetchReply: true
        });

        const collector = message.createMessageComponentCollector({
            filter: i => i.customId === 'accept-rules'
        });

        collector.on('collect', async (i) => {
            const member = i.member;
            
            try {
                // Ajouter le r√¥le
                await member.roles.add(role);

                await i.reply({
                    content: '‚úÖ Merci d\'avoir accept√© le r√®glement ! Vous avez maintenant acc√®s au serveur.',
                    ephemeral: true
                });

                // Attendre un peu pour s'assurer que le r√¥le est bien ajout√©
                setTimeout(async () => {
                    try {
                        // Rafra√Æchir le membre pour s'assurer d'avoir les donn√©es √† jour
                        const updatedMember = await i.guild.members.fetch(member.id);
                        if (updatedMember.roles.cache.has(role.id)) {
                            console.log('Le r√¥le a bien √©t√© ajout√©, le salon va √™tre cach√©');
                        } else {
                            console.log('Le r√¥le n\'a pas encore √©t√© ajout√©, on attend');
                        }
                    } catch (error) {
                        console.error('Erreur lors de la v√©rification du r√¥le:', error);
                    }
                }, 1000);

            } catch (error) {
                console.error('Erreur lors de la validation:', error);
                await i.reply({
                    content: '‚ùå Une erreur est survenue lors de la validation du r√®glement.',
                    ephemeral: true
                });
            }
        });

        await interaction.followUp({
            content: '‚úÖ Le syst√®me de r√®glement a √©t√© configur√© avec succ√®s ! Le salon sera automatiquement cach√© pour les membres ayant le r√¥le.',
            ephemeral: true
        });
    }
};
